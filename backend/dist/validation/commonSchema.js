"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.courseDescriptionSchema = exports.courseCodeSchema = exports.isoDateTimeSchema = exports.voteSchema = exports.compilerLanguageSchema = exports.tagNameSchema = exports.channelTitleSchema = exports.titleSchema = exports.questionTitleSchema = exports.filterSchema = exports.indexSchema = exports.channelMessageSchema = exports.commentMessageSchema = exports.messageSchema = exports.searchQuerySchema = exports.countPerPageSchema = exports.pageSchema = exports.countryCodeSchema = exports.idSchema = exports.deviceIdSchema = exports.usernameSchema = exports.passwordSchema = exports.emailSchema = void 0;
const zod_1 = require("zod");
const countryCodes_1 = __importDefault(require("../config/countryCodes"));
const compilerLanguages_1 = __importDefault(require("../config/compilerLanguages"));
exports.emailSchema = zod_1.z.email("Invalid email").max(120, "Invalid email");
exports.passwordSchema = zod_1.z.string("Password is required").min(6, "Password is required and must be atleast 6 characters long").max(120, "Password cannot exceed 60 characters");
exports.usernameSchema = zod_1.z.string("Username is required").min(3, "Username should be atleast 3 characters").max(20, "Username must be at most 20 characters");
exports.deviceIdSchema = zod_1.z.string("Device ID is required");
const idSchema = (propName) => zod_1.z.string().regex(/^[0-9a-fA-F]{24}$/, propName + ": Invalid ID format. Must be a 24-character hex string");
exports.idSchema = idSchema;
exports.countryCodeSchema = zod_1.z.string("Country code is required").refine((val) => countryCodes_1.default.includes(val), "Invalid country code");
exports.pageSchema = zod_1.z.number().int().min(1);
exports.countPerPageSchema = zod_1.z.number().int().min(1).max(100);
exports.searchQuerySchema = zod_1.z.string().optional();
exports.messageSchema = zod_1.z.string().min(1, "Message is required").max(4096, "Message cannot exceed 4096 characters");
exports.commentMessageSchema = zod_1.z.string().min(1, "Comment message is required").max(1024, "Comment message cannot exceed 1024 characters");
exports.channelMessageSchema = zod_1.z.string().min(1, "Channel message is required").max(1024, "Channel message cannot exceed 1024 characters");
exports.indexSchema = zod_1.z.number().int("Index must be an integer").min(0, "Index must be at least 0");
const filterSchema = (nums) => zod_1.z.number().refine((val) => nums.includes(val), "Invalid filter number");
exports.filterSchema = filterSchema;
exports.questionTitleSchema = zod_1.z.string().min(1, "Title is required").max(120, "Title cannot exceed 120 characters");
exports.titleSchema = zod_1.z.string().min(1, "Title is required").max(60, "Title cannot exceed 60 characters");
exports.channelTitleSchema = zod_1.z.string().min(1, "Title is required").max(20, "Title cannot exceed 20 characters");
exports.tagNameSchema = zod_1.z.string().min(1, "Tag name is required").max(64, "Tag name cannot exceed 64 characters");
exports.compilerLanguageSchema = zod_1.z.enum(compilerLanguages_1.default, "Invalid language");
exports.voteSchema = zod_1.z.number().int("Vote must be an integer").min(0, "Vote must be 0 or 1").max(1, "Vote must be 0 or 1");
exports.isoDateTimeSchema = zod_1.z.string().regex(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/, "Invalid ISO 8601 datetime format");
exports.courseCodeSchema = zod_1.z.string().min(1, "Course code is required").max(64, "Course code must not exceed 64 characters").regex(/^([a-z]+-)*[a-z]+$/i, "Course code can only contain words separated by \"-\"");
exports.courseDescriptionSchema = zod_1.z.string().max(1000, "Description must not exceed 1000 characters");
